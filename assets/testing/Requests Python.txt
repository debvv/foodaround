# Если политика выполнения запрещает скрипты — разрешить для сессии:
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

# Перейти в папку проекта
cd D:\!@!_UTM_MASTERAT_PROJECT\foodaround_py

# Активация venv312
.\venv312\Scripts\Activate.ps1
/////////////////////////////////////////// TO DO //////////////////////////////////////////////
# to do: 
2. Наполнить базу данными
2.1. Scraped Reviews
Сгенерируйте и вставьте (через SQL-файл или скрипт) хотя бы 50–100 строк в scraped_reviews, чтобы проверить, как /analyze_topics и /analyze_reviews работают на реальных данных.
2.2. Chef Reviews
Заполните таблицу chef_reviews тестовыми записями.
2.3. Orders
Убедитесь, что в orders есть несколько пользователей (в from_id) и разных restaurant_id. Если нужно, запустите seed_orders.py ещё раз или вручную вставьте несколько записей.
3. Написать автотесты
3.1. Unit-тесты для каждого эндпоинта (pytest + requests или FlaskClient).
3.2. Интеграционные тесты, которые поднимут тестовую БД (SQLite) и прогонят все эндпоинты последовательно.
4. Документация
4.1. Опишите в README.md:
Как поднять виртуальное окружение (venv312).
Как заполнить .env (пример строки DB_URL).
Список всех эндпоинтов с примерами запросов/ответов.
Как запускать скрипты обучения:
python train_demand.py
python train_recommender.py
python train_sentiment.py
python train_topic_model.py
Как сеять тестовые данные:
python seed_users.py
python seed_orders.py
4.2. Swagger/OpenAPI (опционально) для более удобного тестирования.
5. Подготовка к продакшену
5.1. Docker. Напишите Dockerfile и docker-compose.yml с сервисами:
MySQL
Flask-приложение
(опционально) Nginx
5.2. Gunicorn вместо встроенного Flask-сервера.
5.3. Проверьте на localhost.
6. Фронтенд (опционально)
Если у вас есть веб-интерфейс, подключите к нему ваши эндпоинты:
Список ресторанов → выпадающий список
Прогноз спроса → форма
Рекомендации → страница профиля пользователя
Анализ отзывов → форма input + вывод результата
Тематический анализ → тоже input + result display
Итоговый чеклист
 Протестированы все эндпоинты через PowerShell / curl / Postman.
 Наполнены все таблицы (orders, users, scraped_reviews, chef_reviews).
 Написаны автоматические тесты.
 Обновлён README.md с инструкциями.
 (Опционально) Собран и протестирован Docker-контейнер.
 (Опционально) Подключён фронтенд.
 //////////////////////REQUESTS//////////////////////////////////
# 1) Прогноз спроса
    invoke-restmethod -uri "http://127.0.0.1:5000/predict_demand" `
                  -method post `
                  -contenttype "application/json" `
                  -body '{"restaurant_id":1,"hour":12,"day_of_week":2,"is_weekend":0}'

# 2) Рекомендации
Invoke-RestMethod -Uri "http://127.0.0.1:5000/recommend" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"user_id":42}'

# 3) Анализ отзывов (sentiment)
Invoke-RestMethod -Uri "http://127.0.0.1:5000/analyze_reviews" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"review_text":"Еда была отличная, но доставка опоздала."}'

# 4) Темы (topic modeling)
Invoke-RestMethod -Uri "http://127.0.0.1:5000/analyze_topics" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"review_text":"Очень понравился вкус и оформление блюда."}'
