# Если политика выполнения запрещает скрипты — разрешить для сессии:
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

# Перейти в папку проекта
cd D:\!@!_UTM_MASTERAT_PROJECT\foodaround_py

# Активация venv312
.\venv312\Scripts\Activate.ps1

# to do: 
2. Наполнить базу данными
2.1. Scraped Reviews
Сгенерируйте и вставьте (через SQL-файл или скрипт) хотя бы 50–100 строк в scraped_reviews, чтобы проверить, как /analyze_topics и /analyze_reviews работают на реальных данных.
2.2. Chef Reviews
Заполните таблицу chef_reviews тестовыми записями.
2.3. Orders
Убедитесь, что в orders есть несколько пользователей (в from_id) и разных restaurant_id. Если нужно, запустите seed_orders.py ещё раз или вручную вставьте несколько записей.


# 1) Прогноз спроса
    invoke-restmethod -uri "http://127.0.0.1:5000/predict_demand" `
                  -method post `
                  -contenttype "application/json" `
                  -body '{"restaurant_id":1,"hour":12,"day_of_week":2,"is_weekend":0}'

# 2) Рекомендации
Invoke-RestMethod -Uri "http://127.0.0.1:5000/recommend" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"user_id":42}'

# 3) Анализ отзывов (sentiment)
Invoke-RestMethod -Uri "http://127.0.0.1:5000/analyze_reviews" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"review_text":"Еда была отличная, но доставка опоздала."}'

# 4) Темы (topic modeling)
Invoke-RestMethod -Uri "http://127.0.0.1:5000/analyze_topics" `
                  -Method POST `
                  -ContentType "application/json" `
                  -Body '{"review_text":"Очень понравился вкус и оформление блюда."}'
